import os
import jwt
import asyncio
import requests
from dotenv import load_dotenv
from datetime import datetime, timedelta
from src.Services.loginService import autenticar, verificarCredenciais
from src.Components.notificacao import notificacao
from src.Models.loginModel import LoginRequest, LoginResponse
from fastapi import APIRouter, HTTPException, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

load_dotenv()

router = APIRouter()
security = HTTPBearer()

SECRET_KEY = os.getenv("JWT_KEY", "jwt_token")
ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 60 * 8))

API_URL = os.getenv("API_URL")
BACKEND_URL = os.getenv("BACKEND_URL")

async def sincronizarProdutos(cnpj: str, token: str, page):
    print(f"üîÑ Verificando necessidade de sincroniza√ß√£o para CNPJ: {cnpj}")
    
    if not cnpj:
        print("‚ÑπÔ∏è Usu√°rio sem CNPJ. Sincroniza√ß√£o ignorada.")
        notificacao(page, "Sincroniza√ß√£o Ignorada", "Usu√°rio sem CNPJ vinculado.", "info")
        return

    try:
        notificacao(page, "Sincroniza√ß√£o de Produtos", "Verificando se h√° atualiza√ß√µes...", "info")
        page.update()

        verificar_response = await asyncio.to_thread(
            lambda: requests.get(
                f"{BACKEND_URL}/verificar-sincronizacao",
                params={"cnpj": cnpj},
                headers={"Authorization": f"Bearer {token}"}
            )
        )

        if verificar_response.status_code == 200:
            data = verificar_response.json()
            if not data.get("necessita_sincronizar", False):
                print("‚úîÔ∏è Nenhuma atualiza√ß√£o necess√°ria. Sincroniza√ß√£o ignorada.")
                notificacao(page, "Sincroniza√ß√£o Atualizada", "Os produtos j√° est√£o sincronizados.", "sucesso")
                return
            
            total_produtos = data.get("total_produtos", 0)
        else:
            print(f"‚ö†Ô∏è Erro ao verificar sincroniza√ß√£o: {verificar_response.text}")
            notificacao(page, "Erro", "Falha ao verificar necessidade de sincroniza√ß√£o.", "erro")
            return

        notificacao(page, "Sincroniza√ß√£o em Andamento", f"Iniciando sincroniza√ß√£o de {total_produtos} produtos...", "info")
        page.update()
        
        lote = 1000
        offset = 0
        total_inseridos = 0
        total_atualizados = 0
        max_tentativas = 20
        contador_tentativas = 0
        
        while True:
            contador_tentativas += 1
            if contador_tentativas > max_tentativas:
                print(f"‚ö†Ô∏è Sincroniza√ß√£o interrompida ap√≥s {max_tentativas} tentativas")
                break
                
            progress = min(100, int((offset / total_produtos) * 100)) if total_produtos > 0 else 100
            notificacao(page, "Sincroniza√ß√£o em Andamento", f"Processando lote {contador_tentativas}... ({progress}%)", "info")
            page.update()
            
            response = await asyncio.to_thread(
                lambda: requests.post(
                    f"{BACKEND_URL}/sincronizar-produtos",
                    json={"offset": offset, "limite": lote},
                    headers={"Authorization": f"Bearer {token}"}
                )
            )
            
            if response.status_code == 200:
                dados = response.json()
                inseridos = dados.get("produtos_inseridos", 0)
                atualizados = dados.get("produtos_atualizados", 0)
                total_inseridos += inseridos
                total_atualizados += atualizados
                
                if dados.get("concluido", False) or (inseridos == 0 and atualizados == 0):
                    break
                
                if offset >= total_produtos:
                    print("‚úÖ Sincroniza√ß√£o conclu√≠da por limite de produtos")
                    break
                    
                offset += lote
                
                await asyncio.sleep(0.2)
            else:
                print(f"‚ö†Ô∏è Erro na sincroniza√ß√£o: {response.text}")
                notificacao(page, "Erro na Sincroniza√ß√£o", f"Falha ao sincronizar lote {contador_tentativas}.", "erro")
                return

        print("üîÑ Produtos sincronizados com sucesso")
        print(f"- Inseridos: {total_inseridos}")
        print(f"- Atualizados: {total_atualizados}")

        notificacao(
            page,
            "Sincroniza√ß√£o Conclu√≠da",
            f"{total_inseridos} produto(s) inserido(s) e {total_atualizados} atualizado(s).",
            "sucesso"
        )

    except Exception as e:
        print(f"‚ö†Ô∏è Exce√ß√£o ao sincronizar produtos: {e}")
        notificacao(page, "Erro", f"Erro inesperado ao sincronizar produtos: {str(e)}", "erro")

async def realizarLogin(page, usuario, senha):
    try:
        response = requests.post(API_URL, json={
            "usuario": usuario,
            "senha": senha
        })

        if response.status_code == 200:
            result = response.json()
            token = result["token"]
            nome = result["data"]["nome"]

            page.selected_empresa_id = result["data"].get("empresa_id")
            page.session.set("usuario_id", result["data"].get("id"))

            page.usuario_info = {
                "nome": result["data"].get("nome"),
                "empresa_id": result["data"].get("empresa_id"),
                "cnpj": result["data"].get("cnpj")
            }

            notificacao(page, "Login realizado", f"Bem-vindo, {nome}!", "sucesso")

            cnpj = result["data"].get("cnpj")
            await sincronizarProdutos(cnpj, token, page)
            
            page.go("/dashboard")

        elif response.status_code == 401:
            notificacao(page, "Login inv√°lido", "Usu√°rio ou senha incorretos.", "erro")
        elif response.status_code == 400:
            notificacao(page, "Dados inv√°lidos", "Verifique os dados informados.", "erro")
        else:
            notificacao(page, "Erro inesperado", response.text, "erro")

    except Exception as e:
        print(f"[ERRO] ao realizar login: {e}")
        notificacao(page, "Erro de rede", "Falha ao conectar com o servidor. Tente novamente.", "erro")

    page.update()

def criarAcessToken(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})

    try:
        encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
        print(f"‚úÖ Token JWT criado com sucesso (expira em {ACCESS_TOKEN_EXPIRE_MINUTES} minutos)")
        return encoded_jwt
    except Exception as e:
        print(f"‚ùå Erro ao criar token JWT: {e}")
        raise HTTPException(status_code=500, detail="Erro ao gerar token")


def verificarToken(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        payload = jwt.decode(credentials.credentials, SECRET_KEY, algorithms=[ALGORITHM])
        usuario: str = payload.get("sub")

        if usuario is None:
            print("‚ùå Token sem usu√°rio v√°lido")
            raise HTTPException(status_code=401, detail="Token inv√°lido")

        print(f"‚úÖ Token v√°lido para usu√°rio: {usuario}")
        return payload

    except jwt.ExpiredSignatureError:
        print("‚ùå Token expirado")
        raise HTTPException(status_code=401, detail="Token expirado")
    except jwt.InvalidTokenError:
        print("‚ùå Token inv√°lido")
        raise HTTPException(status_code=401, detail="Token inv√°lido")
    except Exception as e:
        print(f"‚ùå Erro ao verificar token: {e}")
        raise HTTPException(status_code=401, detail="Token inv√°lido")

@router.post("/login", response_model=LoginResponse)
async def realizaLogin(request: LoginRequest):
    try:
        print(f"üîë Tentativa de login para: {request.usuario}")

        if not request.usuario or not request.senha:
            print("‚ùå Campos obrigat√≥rios n√£o preenchidos")
            raise HTTPException(
                status_code=400,
                detail="Usu√°rio e senha s√£o obrigat√≥rios"
            )

        dadosUsuario = verificarCredenciais(request.usuario, request.senha)

        if not dadosUsuario:
            print(f"‚ùå Login falhou para: {request.usuario}")
            raise HTTPException(
                status_code=401,
                detail="Usu√°rio ou senha inv√°lidos"
            )

        tokenData = {
            "sub": dadosUsuario["usuario"],
            "user_id": dadosUsuario["id"],
            "empresa_id": dadosUsuario["empresa_id"],
            "cnpj": dadosUsuario.get("cnpj"),
            "nome": dadosUsuario["nome"]
        }

        acessToken = criarAcessToken(tokenData)

        print(f"‚úÖ Login bem-sucedido para: {request.usuario}")

        return LoginResponse(
            success=True,
            message="Login realizado com sucesso",
            data={
                "id": dadosUsuario["id"],
                "usuario": dadosUsuario["usuario"],
                "nome": dadosUsuario["nome"],
                "empresa_id": dadosUsuario["empresa_id"],
                "cnpj": dadosUsuario.get("cnpj")
            },
            token=acessToken
        )

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå [ERRO] Login Controller: {e}")
        raise HTTPException(
            status_code=500,
            detail="Erro interno do servidor"
        )

@router.get("/me")
async def obterUsuario(current_user: dict = Depends(verificarToken)):
    try:
        print(f"üìã Solicita√ß√£o de dados do usu√°rio: {current_user.get('sub')}")

        return {
            "success": True,
            "data": {
                "usuario": current_user.get("sub"),
                "user_id": current_user.get("user_id"),
                "empresa_id": current_user.get("empresa_id"),
                "nome": current_user.get("nome")
            }
        }
    except Exception as e:
        print(f"‚ùå Erro ao obter usu√°rio atual: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@router.post("/logout")
async def logout():
    print("üö™ Logout realizado")
    return {
        "success": True,
        "message": "Logout realizado com sucesso"
    }

@router.post("/refresh")
async def carregarToken(current_user: dict = Depends(verificarToken)):
    try:
        print(f"üîÑ Renovando token para: {current_user.get('sub')}")

        new_token_data = {
            "sub": current_user.get("sub"),
            "user_id": current_user.get("user_id"),
            "empresa_id": current_user.get("empresa_id"),
            "nome": current_user.get("nome"),
            "cnpj": current_user.get("cnpj")
        }

        new_token = criarAcessToken(new_token_data)

        return {
            "success": True,
            "message": "Token renovado com sucesso",
            "token": new_token
        }

    except Exception as e:
        print(f"‚ùå Erro ao renovar token: {e}")
        raise HTTPException(status_code=500, detail="Erro ao renovar token")

@router.post("/validate")
async def validarToken(current_user: dict = Depends(verificarToken)):
    return {
        "success": True,
        "message": "Token v√°lido",
        "data": {
            "usuario": current_user.get("sub"),
            "expira_em": current_user.get("exp")
        }
    }
